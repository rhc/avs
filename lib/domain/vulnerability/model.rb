# frozen_string_literal: true

class Vulnerability
  attr_accessor :id,
                :title,
                :description,
                :published,
                :risk_score,
                :severity,
                :severity_score

  def initialize(
    id:,
    title:,
    description:,
    published:,
    risk_score:,
    severity:,
    severity_score:
  )
    @id = id
    @title = title
    @description = description
    @published = published
    @risk_score = risk_score
    @severity = severity
    @severity_score = severity_score
  end

  # data json comes from the API vulnerabilities/get
  def self.from_json(data)
    Vulnerability.new(
      id: data[:id],
      title: data[:title],
      description: data[:description],
      published: data[:published],
      risk_score: data[:riskScore],
      severity: data[:severity],
      severity_score: data[:severityScore]
    )
  end

  def to_s
    [id, title, description, severity, published].join ','
  end
end

class CisaKevVulnerability
  attr_accessor :cve_id,
                :vendor,
                :product,
                :vulnerability_name,
                :added_date,
                :due_date,
                :description,
                :required_action,
                :ransomware_campaign,
                :notes

  def self.table_name
    'vulnerability_cisa_kev'
  end

  # NOTE: must in the same order of the DB table columns
  # Fetch methods that are created by attr_accessor and are not inherited
  def self.columns
    methods = instance_methods - Object.methods
    methods.select { |m| m.to_s.end_with?('=') }
           .map { |m| m.to_s.chop.to_sym }
  end

  def self.primary_key
    'cve_id'
  end

  def to_csv
    self.class.columns
        .map { |column| send(column.to_sym) }
  end

  def initialize(
    cve_id:,
    vendor:,
    product:,
    vulnerability_name:,
    added_date:,
    due_date:,
    description:,
    required_action:,
    ransomware_campaign:,
    notes:
  )
    @cve_id = cve_id
    @vendor = vendor
    @product = product
    @vulnerability_name = vulnerability_name
    @added_date = added_date
    @due_date = due_date
    @description = description
    @required_action = required_action
    @ransomware_campaign = ransomware_campaign
    @notes = notes
  end

  def self.from_json(json)
    CisaKevVulnerability.new(
      cve_id: json['cveID'],
      vendor: json['vendorProject'],
      product: json['product'],
      vulnerability_name: json['vulnerabilityName'],
      added_date: json['dateAdded'],
      due_date: json['dueDate'],
      description: json['shortDescription'],
      required_action: json['requiredAction'],
      ransomware_campaign: json['knownRansomwareCampaignUse'],
      notes: json['notes']
    )
  end

  # Converts the instance into a JSON string
  def to_json(*_args)
    hash = {
      cveID: @cve_id,
      vendorProject: @vendor,
      product: @product,
      vulnerabilityName: @vulnerability_name,
      dateAdded: @added_date,
      dueDate: @due_date,
      shortDescription: @description,
      requiredAction: @required_action,
      knownRansomwareCampaignUse: @ransomware_campaign,
      notes: @notes
    }
    JSON.generate(hash)
  end

  def to_s
    [cve_id, vendor, product, vulnerability_name, due_date, description].join ','
  end
end
